/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * OpenAPI spec version: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GuidPagedMetadata : IEquatable<GuidPagedMetadata>
    { 
        /// <summary>
        /// Gets or Sets Limit
        /// </summary>

        [DataMember(Name="limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>

        [DataMember(Name="cursor")]
        public Guid? Cursor { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>

        [DataMember(Name="direction")]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>

        [DataMember(Name="orderBy")]
        public OrderBy OrderBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuidPagedMetadata {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GuidPagedMetadata)obj);
        }

        /// <summary>
        /// Returns true if GuidPagedMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of GuidPagedMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuidPagedMetadata other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Limit == other.Limit ||
                    Limit != null &&
                    Limit.Equals(other.Limit)
                ) && 
                (
                    Cursor == other.Cursor ||
                    Cursor != null &&
                    Cursor.Equals(other.Cursor)
                ) && 
                (
                    Direction == other.Direction ||
                    Direction != null &&
                    Direction.Equals(other.Direction)
                ) && 
                (
                    OrderBy == other.OrderBy ||
                    OrderBy != null &&
                    OrderBy.Equals(other.OrderBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Limit != null)
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    if (Cursor != null)
                    hashCode = hashCode * 59 + Cursor.GetHashCode();
                    if (Direction != null)
                    hashCode = hashCode * 59 + Direction.GetHashCode();
                    if (OrderBy != null)
                    hashCode = hashCode * 59 + OrderBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GuidPagedMetadata left, GuidPagedMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GuidPagedMetadata left, GuidPagedMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
